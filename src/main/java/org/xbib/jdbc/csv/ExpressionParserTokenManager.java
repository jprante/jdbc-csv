/* Generated By:JavaCC: Do not edit this line. ExpressionParserTokenManager.java */
package org.xbib.jdbc.csv;

/**
 * Token Manager.
 */
public class ExpressionParserTokenManager implements ExpressionParserConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x1ffffbfe060L) != 0L) {
                    jjmatchedKind = 41;
                    return 38;
                }
                return -1;
            case 1:
                if ((active0 & 0x30008d0000L) != 0L) {
                    return 38;
                }
                if ((active0 & 0x1cfff32e060L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 41;
                        jjmatchedPos = 1;
                    }
                    return 38;
                }
                return -1;
            case 2:
                if ((active0 & 0x1e0828000L) != 0L) {
                    return 38;
                }
                if ((active0 & 0x1de1f306060L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 2;
                    return 38;
                }
                return -1;
            case 3:
                if ((active0 & 0x201102000L) != 0L) {
                    return 38;
                }
                if ((active0 & 0x1dc1e204060L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 3;
                    return 38;
                }
                return -1;
            case 4:
                if ((active0 & 0x9c1e000000L) != 0L) {
                    return 38;
                }
                if ((active0 & 0x14000204060L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 4;
                    return 38;
                }
                return -1;
            case 5:
                if ((active0 & 0x14000000020L) != 0L) {
                    return 38;
                }
                if ((active0 & 0x204040L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 5;
                    return 38;
                }
                return -1;
            case 6:
                if ((active0 & 0x200000L) != 0L) {
                    return 38;
                }
                if ((active0 & 0x4040L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 6;
                    return 38;
                }
                return -1;
            case 7:
                if ((active0 & 0x40L) != 0L) {
                    return 38;
                }
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 7;
                    return 38;
                }
                return -1;
            case 8:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 8;
                    return 38;
                }
                return -1;
            case 9:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 9;
                    return 38;
                }
                return -1;
            case 10:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 10;
                    return 38;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 40:
                return jjStopAtPos(0, 49);
            case 41:
                return jjStopAtPos(0, 50);
            case 42:
                return jjStopAtPos(0, 44);
            case 43:
                return jjStopAtPos(0, 47);
            case 44:
                return jjStopAtPos(0, 7);
            case 45:
                return jjStopAtPos(0, 46);
            case 47:
                return jjStopAtPos(0, 48);
            case 59:
                return jjStopAtPos(0, 51);
            case 63:
                return jjStopAtPos(0, 22);
            case 65:
            case 97:
                return jjMoveStringLiteralDfa1_0(0x100888000L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa1_0(0x2000200000L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa1_0(0x10004000L);
            case 68:
            case 100:
                return jjMoveStringLiteralDfa1_0(0x1000040L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa1_0(0x200000000L);
            case 71:
            case 103:
                return jjMoveStringLiteralDfa1_0(0x800000000L);
            case 72:
            case 104:
                return jjMoveStringLiteralDfa1_0(0x4000000000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa1_0(0x40000L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa1_0(0x8002100000L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa1_0(0x60000000L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_0(0x22000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_0(0x11000010000L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa1_0(0x4000000L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa1_0(0x80000020L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa1_0(0x8000000L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa1_0(0x400000000L);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x4020000000L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x1200020L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
            case 72:
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x8040100040L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x16020000L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
            case 82:
            case 114:
                if ((active0 & 0x10000L) != 0L) {
                    jjmatchedKind = 16;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x1a00000000L);
            case 83:
            case 115:
                if ((active0 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 18, 38);
                } else if ((active0 & 0x80000L) != 0L) {
                    jjmatchedKind = 19;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x80006000L);
            case 86:
            case 118:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
            case 89:
            case 121:
                if ((active0 & 0x2000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 37, 38);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 67:
            case 99:
                if ((active0 & 0x800000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 23, 38);
                }
                break;
            case 68:
            case 100:
                if ((active0 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 15, 38);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
            case 71:
            case 103:
                if ((active0 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 32, 38);
                }
                break;
            case 75:
            case 107:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x2020L);
            case 77:
            case 109:
                if ((active0 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 31, 38);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
            case 78:
            case 110:
                if ((active0 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 30, 38);
                }
                break;
            case 79:
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0xa00000000L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000040L);
            case 84:
            case 116:
                if ((active0 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 17, 38);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x14000000L);
            case 86:
            case 118:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
            case 88:
            case 120:
                if ((active0 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 29, 38);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(1, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 67:
            case 99:
                if ((active0 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 24, 38);
                }
                break;
            case 69:
            case 101:
                if ((active0 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 20, 38);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x100a000020L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0xc000000000L);
            case 76:
            case 108:
                if ((active0 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 13, 38);
                }
                break;
            case 77:
            case 109:
                if ((active0 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 33, 38);
                }
                break;
            case 78:
            case 110:
                return jjMoveStringLiteralDfa4_0(active0, 0x14000000L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x400004000L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x40L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(2, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 67:
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x20L);
            case 68:
            case 100:
                if ((active0 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 26, 38);
                }
                break;
            case 69:
            case 101:
                if ((active0 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 34, 38);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x10000204000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x40L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
            case 80:
            case 112:
                if ((active0 & 0x800000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 35, 38);
                }
                break;
            case 82:
            case 114:
                if ((active0 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 25, 38);
                } else if ((active0 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 27, 38);
                } else if ((active0 & 0x1000000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 36, 38);
                }
                break;
            case 84:
            case 116:
                if ((active0 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 28, 38);
                } else if ((active0 & 0x8000000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 39, 38);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(3, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 69:
            case 101:
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            case 71:
            case 103:
                if ((active0 & 0x4000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 38, 38);
                }
                break;
            case 78:
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x4040L);
            case 84:
            case 116:
                if ((active0 & 0x20L) != 0L) {
                    return jjStartNfaWithStates_0(5, 5, 38);
                } else if ((active0 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 40, 38);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(4, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 67:
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0x40L);
            case 78:
            case 110:
                if ((active0 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 21, 38);
                }
                break;
            case 84:
            case 116:
                return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(5, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
            case 95:
                return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
            case 84:
            case 116:
                if ((active0 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(7, 6, 38);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(6, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
            case 68:
            case 100:
                return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(7, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0);
            return 9;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(8, active0);
    }

    private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(8, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0);
            return 10;
        }
        switch (curChar) {
            case 84:
            case 116:
                return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(9, active0);
    }

    private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(9, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0);
            return 11;
        }
        switch (curChar) {
            case 69:
            case 101:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(11, 14, 38);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(10, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 38;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 38:
                            if ((0x3ff400000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(35, 37);
                            }
                            if ((0x3ff400000000000L & l) != 0L) {
                                if (kind > 41) {
                                    kind = 41;
                                }
                                jjCheckNAdd(34);
                            }
                            if (curChar == 46) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            break;
                        case 0:
                            if ((0x3ff400000000000L & l) != 0L) {
                                if (kind > 41) {
                                    kind = 41;
                                }
                                jjCheckNAddStates(0, 2);
                            } else if ((0x7000000000000000L & l) != 0L) {
                                if (kind > 43) {
                                    kind = 43;
                                }
                            } else if (curChar == 33) {
                                jjCheckNAdd(9);
                            } else if (curChar == 39) {
                                jjCheckNAddTwoStates(6, 7);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 8) {
                                    kind = 8;
                                }
                                jjCheckNAddStates(3, 11);
                            } else if (curChar == 60) {
                                jjCheckNAddTwoStates(9, 13);
                            } else if (curChar == 62) {
                                jjCheckNAdd(9);
                            } else if (curChar == 46) {
                                jjCheckNAdd(1);
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 3:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(4);
                            }
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjCheckNAdd(4);
                            break;
                        case 5:
                            if (curChar == 39) {
                                jjCheckNAddTwoStates(6, 7);
                            }
                            break;
                        case 6:
                            if ((0xffffff7fffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(6, 7);
                            }
                            break;
                        case 7:
                            if (curChar == 39 && kind > 42) {
                                kind = 42;
                            }
                            break;
                        case 8:
                            if ((0x7000000000000000L & l) != 0L && kind > 43) {
                                kind = 43;
                            }
                            break;
                        case 9:
                            if (curChar == 61 && kind > 43) {
                                kind = 43;
                            }
                            break;
                        case 10:
                            if (curChar == 62) {
                                jjCheckNAdd(9);
                            }
                            break;
                        case 11:
                            if (curChar == 33) {
                                jjCheckNAdd(9);
                            }
                            break;
                        case 12:
                            if (curChar == 60) {
                                jjCheckNAddTwoStates(9, 13);
                            }
                            break;
                        case 13:
                            if (curChar == 62 && kind > 43) {
                                kind = 43;
                            }
                            break;
                        case 14:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 8) {
                                kind = 8;
                            }
                            jjCheckNAddStates(3, 11);
                            break;
                        case 15:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 8) {
                                kind = 8;
                            }
                            jjCheckNAdd(15);
                            break;
                        case 16:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjCheckNAddTwoStates(16, 17);
                            break;
                        case 18:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(19);
                            }
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjCheckNAdd(19);
                            break;
                        case 20:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(20, 21);
                            }
                            break;
                        case 21:
                            if (curChar == 46) {
                                jjCheckNAdd(22);
                            }
                            break;
                        case 22:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjCheckNAddTwoStates(22, 23);
                            break;
                        case 24:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(25);
                            }
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjCheckNAdd(25);
                            break;
                        case 26:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(26, 27);
                            }
                            break;
                        case 27:
                            if (curChar != 46) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjstateSet[jjnewStateCnt++] = 28;
                            break;
                        case 29:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(30);
                            }
                            break;
                        case 30:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 9) {
                                kind = 9;
                            }
                            jjCheckNAdd(30);
                            break;
                        case 31:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(31, 32);
                            }
                            break;
                        case 33:
                            if ((0x3ff400000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 41) {
                                kind = 41;
                            }
                            jjCheckNAddStates(0, 2);
                            break;
                        case 34:
                            if ((0x3ff400000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 41) {
                                kind = 41;
                            }
                            jjCheckNAdd(34);
                            break;
                        case 35:
                            if ((0x3ff400000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(35, 37);
                            }
                            break;
                        case 36:
                            if (curChar == 42 && kind > 45) {
                                kind = 45;
                            }
                            break;
                        case 37:
                            if (curChar == 46) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 38:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(35, 37);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 41) {
                                    kind = 41;
                                }
                                jjCheckNAdd(34);
                            }
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 41) {
                                kind = 41;
                            }
                            jjCheckNAddStates(0, 2);
                            break;
                        case 2:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(12, 13);
                            }
                            break;
                        case 6:
                            jjAddStates(14, 15);
                            break;
                        case 17:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(16, 17);
                            }
                            break;
                        case 23:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(18, 19);
                            }
                            break;
                        case 28:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(20, 21);
                            }
                            break;
                        case 32:
                            if ((0x100000001000L & l) != 0L && kind > 9) {
                                kind = 9;
                            }
                            break;
                        case 34:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 41) {
                                kind = 41;
                            }
                            jjCheckNAdd(34);
                            break;
                        case 35:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(35, 37);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 6:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                jjAddStates(14, 15);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            default:
                return jjMoveNfa_1(1, 0);
        }
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 4;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0xf7fffffeffffd9ffL & l) != 0L) {
                                if (kind > 56) {
                                    kind = 56;
                                }
                                jjCheckNAdd(0);
                            }
                            if (curChar == 34) {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 0:
                            if ((0xf7fffffeffffd9ffL & l) == 0L) {
                                break;
                            }
                            if (kind > 56) {
                                kind = 56;
                            }
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            if ((0xfffffffbffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(2, 3);
                            }
                            break;
                        case 3:
                            if (curChar == 34 && kind > 57) {
                                kind = 57;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                        case 0:
                            if (kind > 56) {
                                kind = 56;
                            }
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            jjAddStates(22, 23);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                        case 0:
                            if ((jjbitVec0[i2] & l2) == 0L) {
                                break;
                            }
                            if (kind > 56) {
                                kind = 56;
                            }
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                jjAddStates(22, 23);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            34, 35, 37, 15, 16, 17, 20, 21, 26, 27, 31, 32, 3, 4, 6, 7,
            18, 19, 24, 25, 29, 30, 2, 3,
    };

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, null, null, "\54", null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, "\77", null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, "\52", null, "\55", "\53", "\57", "\50", "\51", "\73", null, null,
            null, null, null, null, null,};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
            "IN_TABLE",
    };

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 0, 0, -1,
    };
    static final long[] jjtoToken = {
            0x70fffffffffe3e1L,
    };
    static final long[] jjtoSkip = {
            0xf000000000001eL,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[38];
    private final int[] jjstateSet = new int[76];
    protected char curChar;

    /**
     * Constructor.
     */
    public ExpressionParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public ExpressionParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 38; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            switch (curLexState) {
                case 0:
                    try {
                        input_stream.backup(0);
                        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    if (jjmatchedPos == 0 && jjmatchedKind > 58) {
                        jjmatchedKind = 58;
                    }
                    break;
                case 1:
                    try {
                        input_stream.backup(0);
                        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    if (jjmatchedPos == 0 && jjmatchedKind > 58) {
                        jjmatchedKind = 58;
                    }
                    break;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    return matchedToken;
                } else {
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
